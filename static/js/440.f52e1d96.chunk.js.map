{"version":3,"file":"static/js/440.f52e1d96.chunk.js","mappings":"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","sources":["api/hooks/categories.mock.ts","api/hooks/products.mock.ts","api/mockApiHandler.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { getCategoriesPath } from './useGetCategorys';\n\nexport const categoriesMockHandler = [\n  rest.get(getCategoriesPath(), (_, res, ctx) => {\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\n  }),\n];\n\nexport const CATEGORIES_RESPONSE_DATA = [\n  {\n    id: 2920,\n    name: '생일',\n    description: '감동을 높여줄 생일 선물 리스트',\n    color: '#5949a3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\n  },\n  {\n    id: 2930,\n    name: '교환권',\n    description: '놓치면 후회할 교환권 특가',\n    color: '#9290C3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\n  },\n];\n","import { rest } from 'msw';\n\nimport { getProductDetailPath } from './useGetProductDetail';\nimport { getProductOptionsPath } from './useGetProductOptions';\nimport { getProductsPath } from './useGetProducts';\n\nexport const productsMockHandler = [\n  rest.get(\n    getProductsPath({\n      categoryId: '2920',\n    }),\n    (_, res, ctx) => {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    },\n  ),\n  rest.get(\n    getProductsPath({\n      categoryId: '2930',\n    }),\n    (_, res, ctx) => {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    },\n  ),\n  rest.get(getProductDetailPath(':productId'), (req, res, ctx) => {\n    const { productId } = req.params;\n    const product = PRODUCTS_MOCK_DATA.content.find((item) => item.id === Number(productId));\n    if (product) {\n      return res(ctx.json(product));\n    }\n\n    return res(ctx.status(404), ctx.json({ message: 'Product not found' }));\n  }),\n  rest.get(getProductOptionsPath(':productId'), (_, res, ctx) => {\n    return res(ctx.json(PRODUCTS_MOCK_OPTIONS));\n  }),\n];\n\nexport const PRODUCTS_MOCK_DATA = {\n  content: [\n    {\n      id: 3245119,\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\n      price: 145000,\n    },\n    {\n      id: 2263833,\n      name: '외식 통합권 10만원권',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\n      price: 100000,\n    },\n    {\n      id: 6502823,\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\n      price: 108000,\n    },\n    {\n      id: 1181831,\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\n      price: 122000,\n    },\n    {\n      id: 1379982,\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\n      price: 133000,\n    },\n  ],\n  number: 0,\n  totalElements: 5,\n  size: 10,\n  last: true,\n};\n\nexport const PRODUCTS_MOCK_OPTIONS = [\n  {\n    id: 1,\n    name: 'Option A',\n    quantity: 10,\n    productId: 1,\n  },\n  {\n    id: 2,\n    name: 'Option B',\n    quantity: 20,\n    productId: 1,\n  },\n];\n","import { rest } from 'msw';\n\nimport { PRODUCTS_MOCK_DATA } from '@/api/hooks/products.mock';\n\nconst tempWishlist: string[] = [];\n\nexport const mockApiHandlers = [\n  // TODO: api/members/register로 하면 http를 사용해서 matching request url이 없다고 나옴\n  rest.post('https://api.example.com/api/members/register', async (req, res, ctx) => {\n    const { email, password } = await req.json<{ email: string; password: string }>();\n\n    if (!email || !password) {\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n    }\n\n    return res(\n      ctx.status(201),\n      ctx.json({\n        email,\n        token: 'mock-token',\n      }),\n    );\n  }),\n  rest.post('https://api.example.com/api/members/login', async (req, res, ctx) => {\n    const { email, password } = await req.json<{ email: string; password: string }>();\n\n    // temporary mock user\n    if (email === 'qqqq@qqq.com' && password === 'wwwwww') {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          email,\n          token: 'mock-token',\n        }),\n      );\n    }\n\n    return res(ctx.status(403), ctx.json({ message: 'Invalid email or password' }));\n  }),\n  rest.post('https://api.example.com/api/wishes', async (req, res, ctx) => {\n    const { productId } = await req.json<{ productId: string }>();\n    const token = req.headers.get('Authorization')?.split(' ')[1];\n\n    if (!token) {\n      return res(ctx.status(401), ctx.json({ message: 'Invalid or missing token' }));\n    }\n\n    if (!productId) {\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n    }\n\n    tempWishlist.push(productId);\n\n    return res(\n      ctx.status(201),\n      ctx.json({\n        id: 1,\n        productId,\n      }),\n    );\n  }),\n  rest.get('https://api.example.com/api/wishes', (req, res, ctx) => {\n    const token = req.headers.get('Authorization')?.split(' ')[1];\n\n    if (!token) {\n      return res(ctx.status(401), ctx.json({ message: 'Invalid or missing token' }));\n    }\n\n    const page = parseInt(req.url.searchParams.get('page') || '0', 10);\n    const size = parseInt(req.url.searchParams.get('size') || '10', 10);\n\n    if (isNaN(page) || isNaN(size)) {\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n    }\n\n    const wishlistItems = tempWishlist\n      .map((itemId) => {\n        return PRODUCTS_MOCK_DATA.content.find((product) => product.id === parseInt(itemId));\n      })\n      .filter((item) => item !== undefined);\n\n    const paginatedItems = wishlistItems.slice(page * size, (page + 1) * size);\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        content: paginatedItems.map((item, index) => ({\n          id: index + 1,\n          product: item,\n        })),\n        pageable: {\n          sort: {\n            sorted: true,\n            unsorted: false,\n            empty: false,\n          },\n          pageNumber: page,\n          pageSize: size,\n          offset: page * size,\n          unpaged: false,\n          paged: true,\n        },\n        totalPages: Math.ceil(wishlistItems.length / size),\n        totalElements: wishlistItems.length,\n        last: page === Math.ceil(wishlistItems.length / size) - 1,\n        number: page,\n        size: size,\n        numberOfElements: paginatedItems.length,\n        first: page === 0,\n        empty: paginatedItems.length === 0,\n      }),\n    );\n  }),\n  rest.delete('https://api.example.com/api/wishes/:productId', (req, res, ctx) => {\n    const token = req.headers.get('Authorization')?.split(' ')[1];\n    const { productId } = req.params;\n\n    if (!token) {\n      return res(ctx.status(401), ctx.json({ message: 'Invalid or missing token' }));\n    }\n\n    const wishIndex = tempWishlist.findIndex((itemId) => itemId === productId);\n\n    if (wishIndex === -1) {\n      return res(ctx.status(404), ctx.json({ message: 'Wish not found' }));\n    }\n\n    tempWishlist.splice(wishIndex, 1);\n\n    return res(ctx.status(204));\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\nimport { productsMockHandler } from '@/api/hooks/products.mock';\nimport { mockApiHandlers } from '@/api/mockApiHandler.mock';\n\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...mockApiHandlers,\n);\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","productsMockHandler","getProductsPath","categoryId","PRODUCTS_MOCK_DATA","getProductDetailPath","req","productId","params","product","content","find","item","Number","status","message","getProductOptionsPath","PRODUCTS_MOCK_OPTIONS","price","number","totalElements","size","last","quantity","tempWishlist","mockApiHandlers","post","async","email","password","token","_req$headers$get","headers","split","push","_req$headers$get2","page","parseInt","url","searchParams","isNaN","wishlistItems","map","itemId","filter","undefined","paginatedItems","slice","index","pageable","sort","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","totalPages","Math","ceil","length","numberOfElements","first","delete","_req$headers$get3","wishIndex","findIndex","splice","worker","setupWorker"],"sourceRoot":""}